void trans(char *exp，char postexp[])		
{     char e;  
       SqStack *Optr;		   //定义运算符栈指针
       InitStack(Optr);		   //初始化运算符栈
       int i=0;			   //i作为postexp的下标
       while (*exp!='\0')		   //exp表达式未扫描完时循环
       { 	
        switch(*exp)
	{
	      case '(':	           //判定为左括号
	         Push(Optr，'(');   //左括号进栈
	         exp++;		    //继续扫描其他字符
	         break;
              case ')':		                  //判定为右括号
	        Pop(Optr，e);	    //出栈元素e
	        while (e!='(')	    //不为'('时循环
	        {	  postexp[i++]=e;	    //将e存放到postexp中
		  Pop(Optr，e);	    //继续出栈元素e
	         }
	         exp++;		     //继续扫描其他字符
	         break;
               case '+':			//判定为加或减号
	       case '-':
	         while (!StackEmpty(Optr))	//栈不空循环
		{        
                    GetTop(Optr，e);		//取栈顶元素e
		    if (e!='(')			//e不是'('
		    {      
                        postexp[i++]=e;	//将e存放到postexp中
			Pop(Optr，e);		//出栈元素e
		     }
		     else			//e是'(时退出循环
			  break;
		 }
		Push(Optr，*exp);		//将'+'或'-'进栈
		exp++;				//继续扫描其他字符
		break;
               case '*':				//判定为'*'或'/'号
	       case '/':
	        while (!StackEmpty(Optr))	//栈不空循环
	        {     
                GetTop(Optr，e);		//取栈顶元素e
		if (e=='*' || e=='/')
		{       postexp[i++]=e;	//将e存放到postexp中
		        Pop(Optr，e);	//出栈元素e
		}
		else			//e为非'*'或'/'运算符时退出循环
		      break;
	         }
	         Push(Optr，*exp);		//将'*'或'/'进栈
	         exp++;			//继续扫描其他字符
	         break;
               default:			//处理数字字符
	         while (*exp>='0' && *exp<='9')      //判定为数字字符
	         {      postexp[i++]=*exp;
		  exp++;
	         }
	         postexp[i++]='#';	//用#标识一个数值串结束
	}
        }
        while (!StackEmpty(Optr))	//此时exp扫描完毕，栈不空时循环
        {     Pop(Optr，e);		//出栈元素e
	      postexp[i++]=e;		//将e存放到postexp中
        }
        postexp[i]='\0';		//给postexp表达式添加结束标识
        DestroyStack(Optr);	//销毁栈
    }



